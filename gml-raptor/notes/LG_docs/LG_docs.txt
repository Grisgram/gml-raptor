LG - The (L)ocale (G)enious.
Copyright (c) 2002-2022 Michael Barthold, indievidualgames.com

Please respect the MIT License for this library: https://opensource.org/licenses/MIT
====================================================================================

NAMING CONVENTIONS
==================

FUNCTIONS
---------
	LG comes with a bunch of functions that shall make your life easier, when it comes to localized content.
	In general, there are two types of functions: 
		* Functions that start with LG_ are end-user-functions and are here for you to be called.
		* Functions that start with two underscores __LG are internal functions and should not be called directly.

	In addition, LG offers some #macro definitions that shall help you create better readable code.
	They follow the same scheme: Some start with LG_ and are here for you to be used, some are internal and start with __LG.

MACROS
------
	Most of the macros available for LG are configuration macros and have their docs directly in the LG_Configuration file.
	See an overview here. Detailled explanation in LG_Configuration. The values in (braces) are the default values.

	Configuration macros
	--------------------
	LG_DEFAULT_LANGUAGE				("en")		-> Fallback language.
	LG_AUTO_INIT_ON_STARTUP			(true)		-> If true, LG_Init() will be called for you.
	LG_ROOT_FOLDER					("locale/")	-> Location of the locale files.
	LG_SCRIBBLE_COMPATIBLE			(true)		-> If you use scribble too, leave this true.

	Runtime macros
	--------------
	These macros hold valid values after the first run of LG_Init().
	LG_AVAIL_LOCALES	-> An array of two-letter-strings holding the available locales in this game.
	LG_OS_LANGUAGE		-> The language of the underlying operating system.
	LG_CURRENT_LOCALE	-> The currently active locale (= strings of this locale are currently loaded).


HOW LG WORKS
============
	You organize the strings of your game in .json files that follow this naming convention:
	
		locale_<language>.json
		
	So, your english strings are in locale_en.json, your german ones in locale_de.json, spanish in locale_es.json, etc...
	
	The json structure is as simple as possible, it's just key/value pairs and you can organize them in objects to have strings,
	that belong together, can be found in their own group in the file.
	
	Here is the default language_en.json file that comes with LG:
	-----------------------------------------------------------------------------
	{
		"legal" : {
			"game_name"		: "enter-game-name-here",
			"company"		: "indievidualgames.com",
			"copyright" 	: "(c)2022 indievidualgames.com",
			"locale_author" : "Mike Barthold aka Haerion Coldrock aka Grisgram",
			"developer" 	: "Mike Barthold aka Haerion Coldrock aka Grisgram",
		},
	
		"credits" : {
			"credits_title" : "Credits",
		},
	
	}
	-----------------------------------------------------------------------------

	You can create as many json objects (or groups, if you prefer that name) as you like.
	More complex games will likely have more group levels. Feel free to cascade as deep as you want, LG can handle it!


FUNCTIONS - HOW TO USE LG
=========================

LG_init(locale_to_use = undefined)
----------------------------------
	Initializes the LG system. If LG_AUTO_INIT_ON_STARTUP is set to false, must be called at start of the game.
	Subsequent calls will re-initialize and reload the language file of the current language.
	To "hot-swap" the display language, use the LG_hotswap(...) function.

	@param {string} locale_to_use	If not supplied or undefined, the OS language will be used.
									You can supply here the locale from your game's settings files
									that the user might have set in your game's options.


LG_hotswap(new_locale)
----------------------
	Reload the LG system with a new language. 
	+-----------------------------------------------------------------------------------------------+
	| (!) ATTENTION! This function will call LG_Init(), load the file and restart the current room! |
	+-----------------------------------------------------------------------------------------------+
	
	@param {string} new_locale		The new locale to switch to.


LG(...)
-------
	This is the heart of LG. To resolve a string, you call LG with the required parameters to find it.
	NOTE: The key parameters support also "path" syntax, so it's the same, whether you call:
	a) LG("key1", "subkey", "keybelow")
	   OR
	b) LG("key1/subkey/keybelow")
	You may even mix the formats: LG("key", "subkey/keybelow") will work just fine!
	LG supports string references. Use [?key] to reference a string from within another string.
	Reference resolve even works recursively!
	References are resolved only once and the result gets cached, so you don't have to worry about
	performance too much when you create lots of references.
	Only the first resolve consumes the CPU time. Subsequent ones will resolve through a cache hit.
	
	LG supports "random picks", if some character should say "one out of x" possible statements,
	like greetings, curses or cheers when something happens in game.
	To have LG pick one string random, you must either create a sub object in json or create
	a group of strings that all start with the same prefix.
	Then put an asterisk (*) as wildcard marker at the end of your query string when you call LG
	(see examples below)

EXAMPLE FOR STRING REFERENCES:
	"author" : "Mike"
	"credit" : "Written by [?author]." -> Will resolve to "Written by Mike."

EXAMPLE FOR RANDOM PICKS:
	"greetings": {
		"greet_1" : "Hi.",
		"greet_2" : "Hello.",
		"greet_3" : "Welcome.",
	}
	LG("greetings/*");
	or
	LG("greetings/greet*");

	@param {string}	key		At least one key parameter must be supplied.
							You can add as many as you like for sub-key/sub-objects in the json.
	
	@returns {string}		The resolved string or "??? [key] ???" if no string was found.
	
